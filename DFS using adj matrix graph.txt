							DFS ALGORITHM

#include <iostream>
#include <stack>
#include <vector>

using namespace std;
int initialstate,goalstate,numofedges,from,to,depth[10000];
bool visited[10000];
stack<int> openlist;
vector<int> adj[10000],closedlist;

void statespacegraph()
{
    cout<<"Enter number of edges: ";
    cin>>numofedges;
    cout<<"Enter the edges:"<<endl;
    for (int i=0; i<numofedges;i++)
    {
        cout<<"Enter from and to\n";
        cin>>from>> to;
        adj[from].push_back(to);
    }
}

void DFS(int start)
{
    openlist.push(start);
    visited[start]=true;

    while(!openlist.empty())
    {
    int cs=openlist.top();
    openlist.pop();
    closedlist.push_back(cs);

    if(cs==goalstate){
        return;
    }
    for (auto state:adj[cs])
    {
       DFS(state);
    }
}
return;
}

void display()
{
  cout<<"The Path is : ";
  for(int i=0;i<closedlist.size();i++)
  {
      cout<<closedlist[i]<<"\t";
  }
}

int main() {
    statespacegraph();
    cout<<"Enter InitialState:";;
    cin>>initialstate;
    cout<<"Enter Goal State:";
    cin>>goalstate;
    DFS(initialstate);
    display();
    return 0;
}
